<?php/** *@package Anta *//** * Contain some basic static function to handle Zend_Search_Lucene package */class Anta_Lucene{		/**	 * return a boolean value to check the precence of a zend lucene index for the given user	 * @param Application_Model_User user 	- the given user	 */	public static function hasZendLuceneIndex(  Application_Model_User $user ){		$index = Anta_Core::getZendLuceneIndex( $user );		if( is_a( $index, 'Zend_Exception') ){			return false;		}		return $index->numDocs() > 0;	}		/**	 * return a list of search using the index...	 * @param string query					- a string in a lucene format e.g. 'convention + "natural guidance"' 	 * @param Application_Model_User user	- the user to retrieve the lucene index	 * @param function callback				- (optional) a function to handle hits retrieved	 * @return the hits or null if a callback function has been provided	 */	public static function searchLucene( $query, Application_Model_User $user, $callback = null ){		$index = Anta_Core::getZendLuceneIndex( $user );				if( is_a( $index, 'Zend_Exception') ){			return Anta_Core::setError( $index->getMessage() );		}				$query = Zend_Search_Lucene_Search_QueryParser::parse( $query );				$hits = $index->find( $query );				// handle hits via callback		if( $callback != null ){			return $callback( $hits );		}				$results = array("docs"=>array());		foreach ($hits as $hit) {			echo "<pre>";			echo( $hit->id." ".$hit->score );			echo "</pre>";			if( !isset( $results["docs"][ $hit->id ] ) ){				// get document								$results["docs"][ $hit->id ] = (object) array();				$results["docs"][ $hit->id ]->hits = array();				//	(object) array( "info" => array(  $hit->title." ". $hit->id. " " . $hit->score ) );			}			$foundDocument = $hit->getDocument();			$results["docs"][ $hit->id ]->hits[] = $query->htmlFragmentHighlightMatches($foundDocument->contents);			// $results["docs"][ $hit->id ]->hits[]["score"] = $hit->score;		}		return $results;	}		/**	 * Build the Zend Lucene Index using user's documents	 */	public static function buildLuceneIndex( $user ){				// get/ build the index		$index = Anta_Core::getZendLuceneIndex( $user );				// handle exceptions		if( is_a( $index, 'Zend_Exception') ){			return Anta_Core::setError( $index->getMessage() );		}				// delete previous document		for ( $count = 0; $count < $index->count(); $count++ ) {			$index->delete( $count );		}				// dump documents		$stmtDocuments = Application_Model_DocumentsMapper::dumpDocuments( $user, true );			while( $row = $stmtDocuments->fetchObject() ){					$doc = new Application_Model_Document(				$row->id_document, stripslashes( $row->title ), stripslashes( $row->description ),				$row->mimetype, $row->size, $row->language, $row->date, $row->local_url, $row->status, $user			);						$luceneDoc = new Zend_Search_Lucene_Document();						$luceneDoc->addField( Zend_Search_Lucene_Field::Text( 'id', $doc->id ) );									$luceneDoc->addField( Zend_Search_Lucene_Field::Text(				'title',				$doc->title			));			try{			$luceneDoc->addField( Zend_Search_Lucene_Field::Text(				'contents',				file_get_contents( Anta_Core::getTextPreview(  $user, $doc, false ) )			));							// add document to an index			$index->addDocument( $luceneDoc );			} catch( Exception $e ){				print_r( $doc);				echo $e->getMessage();			}		}				// optimize index		$index->optimize();				// return the number of active documents		return $index->numDocs();	}}