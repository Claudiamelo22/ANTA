<?php/** * @package Dnst *//** * This is an api class for zend api of google spreadsheet api... * It provides simpler ways to do common action on spreadsheet */class Dnst_SpreadSheep{		public $googleKey;		protected $_service;		protected $_spreadsheetService;	/**	 * @var HttpClient	 */	protected $_client;		/**	 * @var array	 */	protected $_errors;		protected $_googleUrl;				/**	 * @param email google	 * @param passwd	- your password, plain text!	 */	public function __construct( $email, $passwd ){			$this->_service = Zend_Gdata_Spreadsheets::AUTH_SERVICE_NAME;		$this->_errors	= array();				try {			$this->_client = Zend_Gdata_ClientLogin::getHttpClient($email, $passwd, $this->_service);			$this->_spreadsheetService = new Zend_Gdata_Spreadsheets( $this->_client );		} catch ( Zend_Gdata_App_CaptchaRequiredException $cre) {			$this->_error( "captcha detected", $cre->getCaptchaUrl() );			$this->_error( "captcha token id", $cre->getCaptchaToken() );			return;		} catch ( Exception $ae ) {			$this->_error( "authentication failed",  $ae->exception() );			return;		}		//echo "built";	}		/**	 * @return array - a list of available urls	 */	public function getAvailableUrls(){				$feed = $this->_spreadsheetService->getSpreadsheetFeed();					$urls = array();				foreach( $feed as $value)			$urls[] = (string) $value->id;					return $urls;	}		/**	 * get the title of the spreadsheet	 */	public function getTitle(){		$query = new Zend_Gdata_Spreadsheets_DocumentQuery();		$query->setSpreadsheetKey( $this->googleKey );		$feed = $this->_spreadsheetService->getSpreadsheetEntry( $query );		return $feed->getTitle();	}		/**	 * return an oblect stdObject with rows and cols number	 */	public function getDimensions(){		$query = new Zend_Gdata_Spreadsheets_CellQuery();		$query->setSpreadsheetKey( $this->googleKey );		$cellFeed = $this->_spreadsheetService->getCellFeed( $query );		$rows = $cellFeed->getRowCount()->getText();				if( empty( $this->headers ) ){			$this->getHeaders();		}		$cols = count( $this->headers );				return array( "cols" => $cols, "rows" => $rows );	}		/**	 * return a row unindexed array of text string content or null	 * @param line	- int line number. if line = 0? retrieve the long list of 	 */	public function getRow( $line, $useHeaders = true ){				if( $useHeaders === true ){						if( empty( $this->headers ) ){				$this->getHeaders();			}		}			if( $this->googleKey == null ){			$this->_error( "google key wasn't set properly" );			return;		}				// get document info		$query = new Zend_Gdata_Spreadsheets_CellQuery();		$query->setSpreadsheetKey( $this->googleKey );				try{			$cellFeed = $this->_spreadsheetService->getCellFeed($query);		} catch( Exception $e ){			$this->_error( "google document not found", $e->getMessage() );			return;		}				$desiredRow = array();				foreach($cellFeed as $cellEntry) {						$row = $cellEntry->cell->getRow();			$col = $cellEntry->cell->getColumn();						if( $row != $line && $line > 0 ){				continue;			}						// reading index 			$index = $useHeaders && isset( $this->headers[ $col - 1 ] )? $this->headers[ $col - 1 ]: count( $desiredRow );									if ( $line <= 0 ){				if( isset( $desiredRow[ $row ] ) ){					$desiredRow[ $row ][ $index ] = array();				}								$desiredRow[ $row ][ $index ] = $cellEntry->cell->getText();								continue;			}						$desiredRow[ $index ] = $cellEntry->cell->getText();					}				return $desiredRow;	}		/**	 * a SAFE way to retrieve -and store locally - not null column headers	 */	public function getHeaders( $storeLocally = true ){		$headers = $this->getRow( 1, false );		if( $storeLocally ){			$this->headers = $headers;		}		// print_r( $headers);		return $headers;	}		public function getDocumentInfo(){		$info = (object) array(			'cols'=>0, 			'rows'=>0		);					}			/**	 * retrieve the google doc key from a google url, for lazy people.	 * The key is one of the http param in the url address...	 * @return a key string or false	 */	public static function getGoogleKeyFromUrl( $googleUrl ){		try{			$urlData = parse_url( $googleUrl );			@parse_str( $urlData[ 'query' ], $params );			if( strlen( $params[ 'key' ] ) > 0 ){				return $params[ 'key' ];			}		} catch( Exception $e ){			$this->error( 'malformed url', $e->getMessage() );		}		return false;	}					protected function _error( $errorCode, $errorMessage="" ){		$this->_errors[ $errorCode ] = $errorMessage;	}		public function isValid(){		return empty( $this->_errors );	}		public function getMessages(){		return $this->_errors;	}			}?>