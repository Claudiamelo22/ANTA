<?php/** *@package Ui_Forms_Validators */ /** * Validate a string using a regexp pattern, minLength and maxlength */ class Ui_Forms_Validators_Pattern extends Ui_Forms_Validator{		// some usefulm static string to be used as a pattern...	/**	 * Regex pattern to validate space-only string with 	 * @var string	 */	public static $LABEL = '/^[\wàéèç ]+$/i';		public static $USERNAME = '/^[a-z]+$/i';		public $pattern;		/**	 * The description of the pattern used, to better explain the error behaviour	 * @var string	 */	public $patternDescription;		public function isValid($value){		$this->_setValue($value);				// common behaviour, minLenght and maxLength		if( parent::isValid( $value ) === false ){			return false;		}				if( $this->pattern == null ){			$this->_error( "@private: check your Validator class. Pattern is null" );			return false;		}				if ( ! preg_match( $this->pattern, $value ) ) {			$this->_error( "'$value' ". $this->patternDescription );			return false;		}				        return true;	}  }?>