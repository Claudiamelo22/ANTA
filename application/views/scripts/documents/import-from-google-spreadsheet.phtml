<!-- script view import-from-google-spreadsheet.phtml --><?php	$this->headLink()->appendStylesheet( Anta_Core::getBase() . '/css/today-special.css');			echo 	Ui_Board::getInstance( "Documents", array( 		'user'		=> $this->user	));?>	<!-- load various script -->	<script type="text/javascript" src="<?php 		echo Anta_Utils_Scriptify::getStaticScript(			"jquery-ui-effect-1.8.12.min.js",			"jquery-ui-1.8.11.custom.min.js",			"jquery-ui-dialog-1.8.11.min.js",			"jquery.block.js",			"jquery.color.js",			"jquery.socket.js",			"jquery-toastmessage.js"			// toast messsage plugin		);	?>"></script>		<script type="text/javascript" src="<?php echo Anta_Core::getBase() . '/js/crypto.des.js'?>"></script>		<!-- ui toast -->	<?php	$this->headLink()->appendStylesheet( Anta_Core::getBase() . '/css/jquery.toastmessage.css');	?>	<script type="text/javascript">		// user configuration of all toastmessages to come:		$().toastmessage({			stayTime: 3500		});	</script>	<!-- endof ui toast -->	<!-- documents list content --><?php echo $this->dock; ?><!-- documents list content -->	<!-- import gdocs script, plain text -->	<script type="text/javascript">		/**		 * global object configutrations		 */ 		var apiUrls = {			readSomeLine: "<?php echo Anta_Core::getBase() ?>/api-sheep/read-some-lines/user/<?php echo $this->user->cryptoId?>",			syncDocuments: "<?php echo Anta_Core::getBase() ?>/api-sheep/sync-documents/user/<?php echo $this->user->cryptoId?>"		}				/**		 * some words about this script.		 * steps:		 * 1. get the document url		 * 2. show the login  if required by the api with "unauthenticated" status (showGoogleLogin)		 * 3. load some line and create a small table (showSomeLine)		 */				/** 		 * use the Json result from apiUrls.readSomeLine		 * 		 */		function showSomeLine( googleDoc ){									var settings = {				'title': 'no title provided',				'status': 'ok',				'error' : 0,				'dimensions' :{cols:0, rows:0},				'evaluated':[]			};						if( googleDoc ){$.extend(settings,googleDoc);}						console.log( "showSomeLine" );					var $box = $("#gdoc-some-lines");						// empty if exists			$box.empty();						var title = $("<div />",{ 'class':'grid_12 alpha suffix_1 margin_1'}).html("<h3>"+settings.title+"</h3>");			var isValid = $("<div />",{ 'class':'grid_5 margin_1'}).html( settings.status );									var syncBox = $("<div />",{ 'class':'grid_4 omega centered margin_1'}).append(				$("<a />", { 'href':'#' } ).text('<?php echo I18n_Json::get("update preview")?>')			).click( function(){								// close und reset page				var googleUser = stringToHex( des ( sheepToken, $( "#login-user-gdoc" ).val(), 1, 0, 2 ) );				var googlePass = stringToHex( des ( sheepToken, $( "#login-pass-gdoc" ).val(), 1, 0, 2 ) );									console.log(  googleUser + "," + googlePass );				callGoogleService( { 'google-user': googleUser, 'google-passwd': googlePass } );				return false;			});						var errorMessage = $("<div />",{ 'class':'grid_19 alpha omega margin_1'});			if( settings.error != 0 ){				errorMessage.addClass("invalid").html( settings.error );			}						var samples =  $("<div />",{ 'class':'grid_15 alpha prefix_1 margin_1'}).append(				$("<div />",{ 'class':'grid_4 alpha prefix_1 margin_1'}).append(				"<em><?php echo I18n_Json::get("column name")?></em>"				)			).append(				$("<div />",{ 'class':'grid_9 omega margin_1'}).append(				"<em><?php echo I18n_Json::get("sample value")?></em>"				)			);						// call google service but now let's sync			var sync = $("<div />",{ 'class':'grid_5 omega margin_1'}).append(				$("<a />", { 'href':'#', 'class':'ui-button' } ).text('<?php echo I18n_Json::get("sync preview")?>')			).click( function(){syncDocuments();return false;});						$box.append( title ).append( isValid ).append( syncBox ).append(errorMessage).append( 				samples			).append( 				sync			);									// read headers			for( var i in googleDoc.headers ){				if( googleDoc.evaluated[ i ] == undefined ){					// some problems here					console.log( "milseading in formatting googleDoc Object in showSomeLine function " );					break;				}								var status = googleDoc.evaluated[ i ] == "ok"? true: false;				var message = status? "": googleDoc.evaluated[ i ];								var couple =  $( "<div />",{ 'class':'grid_22 alpha omega' + (!status?"invalid":"") } ).append(					$( "<div />",{ 'class': 'grid_1 alpha' } ).html( status? '<img src="<?php echo Anta_Core::getBase() ?>/images/tick-small.png">':'<img src="<?php echo Anta_Core::getBase() ?>/images/block.png">' ) // unvalid field				).append(					$( "<div />",{ 'class': 'grid_4' } ).html("<b>"+googleDoc.headers[i]+"</b>")				).append(					$( "<div />",{ 'class': 'grid_9' } ).html( googleDoc.samples[ googleDoc.headers[i] ] )				).append(					$( "<div />",{ 'class': 'grid_5 omega' } ).text( message )				);								$box.append( couple );							}						// var errorBox							}				/**		 * this var will contain the dynamic changing token during exchanges with api-sheep		 */		var sheepToken = 0;				function showGoogleLogin(){			$().toastmessage('showNoticeToast',"<?php echo I18n_Json::get("appear google login") ?>");			$.unblockUI();			// $("#url-gdoc").parent().slideUp("fast");						// create or show the login			if( $( "#hidden-login-gdoc" ).length == 0 ){								var username = $("<input/>",{'type': 'text', 'class': 'width_3', 'id': 'login-user-gdoc'});				var password = $("<input/>", {'type': 'password', 'class': 'width_3', 'id': 'login-pass-gdoc'});								var button = $("<input/>",{'type':'button', 'value':'authenticate'}).click( function(){					console.log( "sheeptoken: " + sheepToken );					googleUser = stringToHex( des ( sheepToken, $( "#login-user-gdoc" ).val(), 1, 0, 2 ) );					googlePass = stringToHex( des ( sheepToken, $( "#login-pass-gdoc" ).val(), 1, 0, 2 ) );										console.log(  googleUser + "," + googlePass );					callGoogleService( { 'google-user': googleUser, 'google-passwd': googlePass } );				});								var undo = $("<input/>",{'type':'button', 'value':'undo'}).click( function(){					$("#hidden-login-gdoc").slideUp("fast");				});								var div = $("<div/>",{'class':'grid_22 prefix_1 suffix_1 alpha omega','style':'display:none','id':'hidden-login-gdoc'});								div.append( 					$("<div/>",{'class':'grid_5 suffix_1 alpha'}).append("<p>google account login</p>").append( username )				).append(					$("<div/>",{'class':'grid_5 suffix_1'}).append("<p>google account password</p>").append( password )				).append(					$("<div/>",{'class':'grid_10 omega'}).append( button ).append( undo )				);								$( "#form-import-google-docs" ).append(div);				div.slideDown("fast");			} else {				$("#hidden-login-gdoc").slideDown("fast");			}					}						function syncDocuments( options ){			console.log("executing syncDocuments");									// get params			var googleKey = getGoogleKey();			if( googleKey === false ) return;			console.log("  with google url", googleKey);						var googleUser = stringToHex( des ( sheepToken, $( "#login-user-gdoc" ).val(), 1, 0, 2 ) );			var googlePass = stringToHex( des ( sheepToken, $( "#login-pass-gdoc" ).val(), 1, 0, 2 ) );									settings = {'verbose':true,'google-key':googleKey,'url':apiUrls.syncDocuments,'google-user': googleUser, 'google-passwd': googlePass};			if(options){$.extend(settings,options);}			console.log("  and google user", googleUser, googlePass);						// lock ui			lockUi();			console.log("  start sock", apiUrls.syncDocuments);						// open api cal toward readSomeLine				sock({					url: apiUrls.syncDocuments,					data: settings,					success: function(result){						$.unblockUI();						console.log( result );						sheepToken = result.token;						return;						// $("#hidden-login-gdoc").slideUp("fast");						if( result.status == "ok" ){							$().toastmessage('showSuccessToast', "ok");							$("#hidden-login-gdoc").slideUp("fast");							// showSomeLine( result.googleDoc );						} else if( result.error == "unauthenticated"){							showGoogleLogin();						} else {							$().toastmessage( 'showErrorToast', result.error );						}					},					error:function(error){						$.unblockUI();						$().toastmessage('showErrorToast', "connection troubles");						console.log( "received",error.responseText );					}				});					}				function lockUi(){			$.blockUI({css:{border:'none',padding:'15px',backgroundColor:'#000','-webkit-border-radius':'10px','-moz-border-radius':'10px',opacity:.5,color: '#fff'}});		}				/**		 * get google key from the url field		 */		function getGoogleKey( ){			// validate google key length only			var googleKey = $("#url-gdoc").val();							if( googleKey.length < 3 ){				$().toastmessage( 'showErrorToast', "<?php echo I18n_Json::get("url or key provided is not valid") ?>" + googleKey );				$("#url-gdoc").css("border","1px solid crimson").animate({					borderTopColor: '#D1D1D1', borderLeftColor: '#D1D1D1', borderRightColor: '#D1D1D1', borderBottomColor: '#D1D1D1'				}, 1500 );				return false;			}			return googleKey;		}				function callGoogleService( options ){				console.log("call me");											var googleKey = getGoogleKey();				if( googleKey === false ) return;								settings = {'verbose':true,'google-key':googleKey,'url':apiUrls.readSomeLine};								if(options){$.extend(settings,options);}				lockUi();				// open api cal toward readSomeLine				sock({					url: apiUrls.readSomeLine,					data: settings,					success: function(result){						$.unblockUI();						console.log( result);						sheepToken = result.token;													// $("#hidden-login-gdoc").slideUp("fast");												if( result.status == "ok" ){							$().toastmessage('showSuccessToast', "ok");							$("#hidden-login-gdoc").slideUp("fast");							showSomeLine( result.googleDoc );						} else if( result.error == "unauthenticated"){							showGoogleLogin();						} else {							$().toastmessage( 'showErrorToast', result.error );						}					},					error:function(error){						$.unblockUI();						$().toastmessage('showErrorToast', "connection troubles now");						console.log( error.responseText );					}				});		}				$(window).load( function(){			$("#load-gdoc").click( function(){				// close und reset page				if( $( "#login-user-gdoc" ).length > 0 && $( "#login-pass-gdoc" ).length > 0 ){					var googleUser = stringToHex( des ( sheepToken, $( "#login-user-gdoc" ).val(), 1, 0, 2 ) );					var googlePass = stringToHex( des ( sheepToken, $( "#login-pass-gdoc" ).val(), 1, 0, 2 ) );					callGoogleService( { 'google-user': googleUser, 'google-passwd': googlePass } );				} else {					callGoogleService();				}			});		});					</script>	