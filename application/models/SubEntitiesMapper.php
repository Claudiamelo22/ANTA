<?php/** * @package Application_Model *//** * anta user.*_entities table api. Return and match generic subEntities instances */class Application_Model_SubEntitiesMapper{		public static function getEntityByContent( Application_Model_User $antaUser, $prefix, $content ){		$stmt = Anta_Core::mysqli()->query( "			SELECT 			  id_{$prefix}_entity as id,			  content,			  pid			FROM anta_". $antaUser->username. ".". $prefix. "_entities			  WHERE pid = 0 AND content = ?", array( $content )		);		$row = $stmt->fetchObject();				if( $row == null ) return null;		$entity = new Application_Model_SubEntity( $prefix."_".$row->id, $row->id, $row->content, 0, $row->frequency, $row->pid,  $antaUser->cryptoId  );		return $entity;	}		/**	 * check if the given id has children entities	 * split means :	 * 	1. deleting entities_documents relationships	 *	2. copying entities_documents rel from saved table	 *	3. deleting entitites documents relationships from saved tables	 *	4. restore entity ignore to 0 and children parent id to 0	 * @return an array of restored entities or false	 */	public static function splitEntity( Application_Model_User $antaUser, $prefix, $id ){		$stmt = Anta_Core::mysqli()->query("			SELECT count(*) as amount				FROM `anta_{$antaUser->username}`.`{$prefix}_entities_documents_saved`			WHERE `id_rws_entity` = ?", array( $id ));				if( $stmt->fetchObject()->amount == 0)			return false;				# clean entities_documents		$stmt = Anta_Core::mysqli()->query("			DELETE FROM `anta_{$antaUser->username}`.`{$prefix}_entities_documents`			WHERE `id_rws_entity` = ?", array( $id ));		# copy & paste		$query = "INSERT INTO `anta_{$antaUser->username}`.`{$prefix}_entities_documents`					( id_{$prefix}_entity, id_document, frequency, relevance )				  SELECT id_{$prefix}_entity, id_document, frequency, relevance					FROM `anta_{$antaUser->username}`.`{$prefix}_entities_documents_saved` WHERE id_{$prefix}_entity = ?";		$stmt = Anta_Core::mysqli()->query( 			$query,  array( $id ));		# clean saved queries		$stmt = Anta_Core::mysqli()->query("			DELETE FROM `anta_{$antaUser->username}`.`{$prefix}_entities_documents_saved`			WHERE `id_rws_entity` = ?", array( $id ));				# restore pids and set status included if status is merged		$stmt = Anta_Core::mysqli()->query("			UPDATE `anta_{$antaUser->username}`.`{$prefix}_entities`			SET `pid` = 0, `status` = 'included', `ignore` = 0			WHERE pid = ?", array( $id ));				}	public static function mergeEntities( Application_Model_User $antaUser, $prefix, array $idsFrom, $idTo ){		# save merge to documents inside the rws_entity_bin table		$query = "INSERT INTO `anta_{$antaUser->username}`.`{$prefix}_entities_documents_saved`					( id_{$prefix}_entity, id_document, frequency, relevance )				  SELECT id_{$prefix}_entity, id_document, frequency, relevance					FROM `anta_{$antaUser->username}`.`{$prefix}_entities_documents` WHERE id_{$prefix}_entity = ?";		$stmt = Anta_Core::mysqli()->query( 			$query, array_merge( array( $idTo) )		);		# get document links of "From" entity		$query = "INSERT INTO `anta_{$antaUser->username}`.`{$prefix}_entities_documents` ( id_{$prefix}_entity, id_document, frequency, relevance )						SELECT  ?, id_document, frequency, 0 FROM (                         SELECT id_document, sum( frequency ) as frequency			 FROM 				`anta_{$antaUser->username}`.`{$prefix}_entities_documents` red,				`anta_{$antaUser->username}`.`{$prefix}_entities` ent			 WHERE 				red.id_{$prefix}_entity = ent.id_{$prefix}_entity				AND pid = 0				AND red.id_{$prefix}_entity IN( ".implode( ",",array_fill( 0, count( $idsFrom ) + 1, "?" ) )." )						 GROUP BY id_document			) as merged			ON DUPLICATE KEY UPDATE frequency = merged.frequency		";		$stmt = Anta_Core::mysqli()->query( 			$query, array_merge( array( $idTo,  $idTo) , $idsFrom )		);				# set pid to id_rws pid and ignore to 2		$stmt = Anta_Core::mysqli()->query( "			UPDATE `anta_{$antaUser->username}`.`{$prefix}_entities` SET `pid` = ?, `ignore` = -2 			WHERE id_{$prefix}_entity != $idTo AND id_{$prefix}_entity IN ( ".implode( ",",array_fill( 0, count( $idsFrom ), "?" ) ).") 			", array_merge( array( $idTo ), $idsFrom )		);				# merge tags		$stmt = Anta_Core::mysqli()->query( "			INSERT IGNORE INTO `anta_{$antaUser->username}`.`{$prefix}_entities_tags` (id_{$prefix}_entity, id_tag)			SELECT  ?, id_tag FROM `anta_{$antaUser->username}`.`{$prefix}_entities_tags`			WHERE id_{$prefix}_entity IN ( ".implode( ",",array_fill( 0, count( $idsFrom ), "?" ) ).") 			",  array_merge( array( $idTo ), $idsFrom )		);				# retrieve new merged entity		$stmt = Anta_Core::mysqli()->query( "			SELECT	'{$prefix}' as prefix, id_{$prefix}_entity as identifier, ent.content,				COUNT( DISTINCT id_document ) as distro,					MAX( frequency ) as occurrences,					sign, ent.pid,					`ignore`				FROM anta_{$antaUser->username}.{$prefix}_entities ent					INNER JOIN anta_{$antaUser->username}.{$prefix}_entities_documents	USING ( id_{$prefix}_entity )								WHERE pid = 0 AND id_{$prefix}_entity = ?				GROUP BY id_{$prefix}_entity", array( $idTo )		);		$row = $stmt->fetchObject() ;		if( $row == null ) return null;				$entity = new Application_Model_SubEntity(					$row->prefix."_".$row->identifier,					$row->identifier,					$row->content,					$row->prefix, $row->distro,					$row->occurrences ,					$row->pid ,					$antaUser->cryptoId,					$row->ignore		);				$entity->tags = Application_Model_SubEntitiesTagsMapper::getEntityTags( $antaUser, $prefix, $row->identifier  );		return $entity;	}			public static function getEntity(  Application_Model_User $antaUser, $prefix, $id ){				$stmt = Anta_Core::mysqli()->query( "			SELECT 			  id_{$prefix}_entity as id,			  content,			  pid,			  count( DISTINCT id_document ) as frequency,			  avg( ed.relevance ) as relevance			    		    FROM anta_". $antaUser->username. ".". $prefix. "_entities JOIN anta_{$antaUser->username}.{$prefix}_entities_documents ed		    USING( id_{$prefix}_entity)			  			WHERE id_". $prefix. "_entity = ?", array( $id )		);				$row = $stmt->fetchObject();				if( $row == null ) return null;				$entity = new Application_Model_SubEntity( $prefix."_".$row->id, $row->id, $row->content, $prefix, $row->relevance, $row->frequency, $row->pid,  $antaUser->cryptoId  );		$entity->tags = Application_Model_SubEntitiesTagsMapper::getEntityTags( $antaUser, $prefix, $row->id  );		return $entity;	}		 	public static function getUnignoredNumberOfEntities( Application_Model_User $antaUser, $prefix ){		$stmt = Anta_Core::mysqli()->query( "SELECT number_of_entities FROM anta_{$antaUser->username}.{$prefix}_entities_metrics" );		$row = $stmt->fetchObject();				if( $row == null ) return 0;		return $row->number_of_entities;	}		/**	 * return the number of documents for the give user	 */	public static function  getNumberOfEntities( Application_Model_User $antaUser, $prefix ){		$stmt = Anta_Core::mysqli()->query( "SELECT COUNT(*) as amount FROM anta_{$antaUser->username}.`{$prefix}_entities`" );		$row = $stmt->fetchObject();				if( $row == null ) return 0;		return $row->amount;	}		public static function getFilteredNumberOfEntities( Application_Model_User $antaUser, $prefix, $property, $value  ){		$stmt = Anta_Core::mysqli()->query( "SELECT COUNT(*) as amount FROM anta_{$antaUser->username}.`{$prefix}_entities` WHERE `$property` = ?", array( $value ) );		$row = $stmt->fetchObject();		if( $row == null ) return 0;		return $row->amount;	}		public static function getEntitiesByIds( Application_Model_User $antaUser, $prefix, $ids=array(), $offset=0, $limit=10 ){		$query ="SELECT SQL_CALC_FOUND_ROWS * , id_{$prefix}_entity as id_entity,			content			FROM anta_{$antaUser->username}.{$prefix}_entities			WHERE `ignore` = 0 AND id_{$prefix}_entity IN (".implode(",",array_fill( 0, count($ids),"?" ) ).")			ORDER BY sign ASC						LIMIT {$offset},{$limit}";		$stmt = Anta_Core::mysqli()->query(			$query, $ids		);		$results = array();		while( $row = $stmt->fetchObject() ){			$results[ $row->id_entity ]  = (object ) array(				"id" => $prefix."_". $row->id_entity,				"content" => $row->content,			);		};						$stmt = Anta_Core::mysqli()->query(" SELECT  FOUND_ROWS() as totalItems" );		$totalItems = $stmt->fetchObject()->totalItems ;				return (object) array( "results" => $results, "totalItems"=>$totalItems);	}		/**	 * filter by tag	 * @param object filter	- a list of properties / values couples, given via Dnst_Filter::read()	 */	public static function getEntities( Application_Model_User $antaUser, $filters, $directFlush=false ){		if( empty( $filters->prefixes ) ){			$filters->prefixes = array(  'rws' );		}		if( empty( $filters->order ) ){			$filters->order = array( "occurrences DESC");		}		 		$binds = array();				$wl = new Anta_Utils_WordList( $filters->query );				$content = "%".implode( "%", $wl->words )."%";		if( isset( $filters->exact ) ){			$content = $filters->exact?"%". $filters->query. "%" :"%".implode( "%", $wl->words )."%";		}						$matchingContent = count( $wl->words )>0? "AND content LIKE ?":"";		$matchingTags = !empty( $filters->tags )? "AND id_tag IN (".implode(",", array_fill (0, count( $filters->tags ),"?") ).")":"";				// prepare the union query, with the super container		$unions = array(			/*"SELECT	'super' as prefix, id_super_entity as identifier,					content, 0 as frequency,					'0.5' as occurrences,					sign,					pid				FROM anta_{$antaUser->username}.super_entities				WHERE `ignore` = ? {$matchingContent}				GROUP BY id_super_entity			"*/		); 				foreach( $filters->prefixes as $prefix ){						$unions[] = "				SELECT	'{$prefix}' as prefix, id_{$prefix}_entity as identifier, content,					COUNT( DISTINCT id_document ) as distro,					MAX( frequency ) as occurrences,					sign, pid,					COUNT( DISTINCT id_tag ) as tags_pertinence,					`ignore`				FROM anta_{$antaUser->username}.{$prefix}_entities 					INNER JOIN anta_{$antaUser->username}.{$prefix}_entities_documents	USING ( id_{$prefix}_entity )					LEFT JOIN anta_{$antaUser->username}.{$prefix}_entities_tags USING ( id_{$prefix}_entity )									WHERE pid = ? ".($filters->ignore != -1? "AND `ignore` = ?":"AND `ignore` > ? ")." {$matchingTags} {$matchingContent}				GROUP BY id_{$prefix}_entity";						$binds = array_merge( $binds, array( $filters->pid, $filters->ignore), $filters->tags );			if( count( $wl->words ) >0 )  $binds[] = $content;					}		$query = "SELECT SQL_CALC_FOUND_ROWS * FROM ( (". implode( ") UNION (", $unions ). ") ) as filtered			ORDER BY ".implode( ", ", $filters->order ).			( $filters->limit != -1? " LIMIT {$filters->offset}, {$filters->limit}": "" );		//print_r($filters->tags );		//exit( $query);		// and finally, the query!		$stmt = Anta_Core::mysqli()->query( $query, $binds );				$results = array();				if( $directFlush ) return $stmt;				while( $row = $stmt->fetchObject() ){			$results[ $row->prefix."_".$row->identifier ]  = new Application_Model_SubEntity(				$row->prefix."_".$row->identifier,				$row->identifier,				$row->content,				$row->prefix, $row->distro,				$row->occurrences ,				$row->pid ,				$antaUser->cryptoId,				$row->ignore			);		};						$stmt = Anta_Core::mysqli()->query(" SELECT  FOUND_ROWS() as totalItems" );		$totalItems = $stmt->fetchObject()->totalItems ;		/* get tags */		foreach( array_keys( $results ) as $k ){			$results[ $k ]->tags = Application_Model_SubEntitiesTagsMapper::getEntityTags( $antaUser, $results[ $k ]->prefix, $results[ $k ]->table_id  );					}							return (object) array( "results" => $results, "totalItems"=>$totalItems);	}			/**	 * return a 	 * lits of subEntities matching	 * @param antaUser	- the user ( aka database name )	 * @param prefixes 	- array of table prefixes	 * @param matchSimilar	- boolean	 * @param language	- used by match similar, stem the words before looking into the database	 * @param flags		- an array of single flag fields, like ignore=>1 or pid=>0	 */	public static function __getEntities( Application_Model_User $antaUser, array $orders=array(), $prefixes=array(), $offset=0, $limit=100, $search="", $matchSimilar = false, $language = "en", $flags = array(), $directFlush=false ){		// echo "search for: ".$search;		/// filter the entities tables to be viewed		if( empty( $prefixes ) ){			$prefixes = array( 'rws' );		}										$flags = array_merge( array( "pid" => "0", "ignore" => "0" ), $flags );								$queryString = "";				// clean search		$search = str_replace( "'", "\\'", $search );				// searchability		if( !empty( $search ) ){						// find similar string: stem words, than LIKE into sign indexed cleaned list			if( $matchSimilar == true ){				$wl = new Anta_Utils_WordList( $search );								// stem them				$wl->applyStem( $language );								// enqueue them				$search = implode( "%", $wl->words );				echo $search;			}						$queryString = "AND ".( $matchSimilar? '`sign`': '`content`' )." LIKE '%{$search}%'";		}				// prepare the union query, with the super cosone		$unions = array(			"SELECT	'super' as prefix,					id_super_entity as identifier,					content,					'2' as frequency,					'0.5' as corpus_relevance,					sign,					pid				FROM anta_{$antaUser->username}.super_entities				WHERE pid = {$flags['pid']} AND `ignore` = {$flags['ignore']} {$queryString}				GROUP BY id_super_entity			"		); 		foreach( $prefixes as $prefix ){						$unions[] = "				SELECT	'{$prefix}' as prefix,					id_{$prefix}_entity as identifier,					content,					COUNT( id_document ) as frequency,					AVG( anta_{$antaUser->username}.{$prefix}_entities_documents.relevance ) as corpus_relevance,					sign,					pid				FROM anta_{$antaUser->username}.{$prefix}_entities JOIN anta_{$antaUser->username}.{$prefix}_entities_documents					USING ( id_{$prefix}_entity )				WHERE pid = {$flags['pid']} AND `ignore` = {$flags['ignore']} {$queryString}				GROUP BY id_{$prefix}_entity";					}				// prepare the order values		$validOrderBy = array( "prefix ASC", "prefix DESC", "frequency ASC", "frequency DESC", "corpus_relevance ASC", "corpus_relevance DESC", "sign ASC", "sign DESC" );				if( empty( $orders ) ) $orders = array ( "frequency DESC", "corpus_relevance ASC" );				$orderBy = array();				foreach( $orders as $order ){			if ( in_array( $order, $validOrderBy ) ){				$orderBy[] = $order;			}		}				$query = "SELECT SQL_CALC_FOUND_ROWS * FROM ( (". implode( ") UNION (", $unions ). ") ) as filtered			ORDER BY ".implode( ", ", $orderBy ).			( $limit != -1? " LIMIT {$offset}, {$limit}": "" );		// exit( $query );				// and finally, the query!		$stmt = Anta_Core::mysqli()->query( $query );				$results = array();				if( $directFlush ) return $stmt;				while( $row = $stmt->fetchObject() ){			$results[ $row->prefix."_".$row->identifier ]  = new Application_Model_SubEntity(				$row->prefix."_".$row->identifier,				$row->identifier,				$row->content,				$row->prefix, $row->corpus_relevance,				$row->frequency ,				$row->pid ,				$antaUser->cryptoId,				$flags['ignore']			);														};						$stmt = Anta_Core::mysqli()->query(" SELECT  FOUND_ROWS() as totalItems" );		$totalItems = $stmt->fetchObject()->totalItems ;		/* get tags */		foreach( array_keys( $results ) as $k ){			$results[ $k ]->tags = Application_Model_SubEntitiesTagsMapper::getEntityTags( $antaUser, $results[ $k ]->prefix, $results[ $k ]->table_id  );					}							return (object) array( "results" => $results, "totalItems"=>$totalItems);			}		public static function setIgnore( Application_Model_User $antaUser, $prefix, $idEntity, $ignore = true ){		$stmt = Anta_Core::mysqli()->query( 			"UPDATE anta_{$antaUser->username}.`{$prefix}_entities` set `ignore` = ? WHERE id_{$prefix}_entity = ?", array(				$ignore?1:0, $idEntity			)		);				return $stmt->rowCount();	}		public static function setContent( Application_Model_User $antaUser, $prefix, $idEntity, $content ){		$stmt = Anta_Core::mysqli()->query( 			"UPDATE IGNORE anta_{$antaUser->username}.`{$prefix}_entities` set `content` = ? WHERE id_{$prefix}_entity = ?", array(				$content, $idEntity			)		);		$affected = $stmt->rowCount();				if( $affected > 0 )return $affected;		return 0;	}		public static function setPid( Application_Model_User $antaUser, $prefix, $idEntity, $pid ){		$stmt = Anta_Core::mysqli()->query( 			"UPDATE anta_{$antaUser->username}.`{$prefix}_entities` set `pid` = ? WHERE id_{$prefix}_entity = ?", array(				$pid, $idEntity			)		);				return $stmt->rowCount();	}}?>