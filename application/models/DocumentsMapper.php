<?phpclass Application_Model_DocumentsMapper{	public static function install( $username ){		$stmt = Anta_Core::mysqli()->query(			"CREATE TABLE IF NOT EXISTS anta_".$username.".`documents` (				`id_document` int(11) NOT NULL AUTO_INCREMENT,				`title` varchar(200) NOT NULL,				`description` text NOT NULL,				`mimetype` varchar(50) NOT NULL,				`size` int(11) NOT NULL,				`language` varchar(2) NOT NULL,				`date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,				`local_url` text NOT NULL, 
				`remote_url` text NOT NULL,				`status` varchar(8) NOT NULL DEFAULT 'ready',				`ignore` BOOL NOT NULL DEFAULT '0' COMMENT 'flag documents to be ignored',				PRIMARY KEY (`id_document`),				KEY `title` (`title`,`date`,`status`),				KEY `date`(`date`),				KEY `ignore`(`ignore`)			) ENGINE=InnoDB  DEFAULT CHARSET=utf8"		);	}		/**	 * @param antaUSer	- the user name, without the anta_ prefix"	 */	public static function addDocument( Application_Model_User $antaUser, $title, $description, $size, $mimeType, $localUrl,  $date="CURRENT_TIMESTAMP", $language="en", $remoteUrl="" ){		$query = "			INSERT INTO  anta_".$antaUser->username.".`documents` (				`id_document`, `title`, `description`,				`mimetype`, `size`,				`language`, `date`, `local_url` , `remote_url`,				`status`			) VALUES (				NULL, ?, ?, 				?, ?, 				?, ?, ?, ?,				'ready'			)";		$stmt = Anta_Core::mysqli()->query( $query, array(			$title, $description, 			$mimeType, $size,			$language, $date == "CURRENT_TIMESTAMP"? Anta_Core::getCurrentTimestamp(): $date, $localUrl, $remoteUrl		));				return Anta_Core::mysqli()->lastInsertId( "anta_".$antaUser->username.".`documents`" );	}				public static function hasEntity( Application_Model_User $antaUser, $idDocument, $idEntity ){		$stmt = Anta_Core::mysqli()->query(			"SELECT `id_entity_occurrence`				FROM anta_".$antaUser->username.".`entities_occurrences`			WHERE				`id_document` = ? AND				`id_entity` = ?",			array( $idDocument, $idEntity )		);				return $stmt->fetchObject() != null;			}			/**	 * Return all entities bound to given document	 */	public static function getEntities( Application_Model_User $user, $idDocument ){				return Application_Model_SubEntitiesDocumentsMapper::getEntities( $user, $idDocument );		$stmt = Anta_Core::mysqli()->query( "		    SELECT id_entity,				count( id_entity ) AS occurrences,				count( distinct id_document ) as spread,				content,				group_concat( distinct anta_".$user->username.".entities.type) as type, 				AVG( anta_".$user->username.".entities_occurrences.relevance ) as avg_relevance,				MIN( anta_".$user->username.".entities_occurrences.relevance ) as min_relevance,				MAX( anta_".$user->username.".entities_occurrences.relevance ) as max_relevance			FROM anta_".$user->username.".entities_occurrences JOIN anta_".$user->username.".entities 				USING ( id_entity )			WHERE id_document = ?			GROUP BY id_entity			ORDER BY avg_relevance DESC",array( $idDocument ) );					$results = array();				while( $row = $stmt->fetchObject() ){			$buffer = new Application_Model_Entity( $row->id_entity, $row->content, $row->type, $row->avg_relevance );						$buffer->minRelevance = $row->min_relevance;			$buffer->maxRelevance = $row->max_relevance;			$buffer->spread       = $row->spread;			$buffer->occurrences  = $row->occurrences;						$results[] = $buffer;					}				return $results;	}		/**	 * return the number of documents for the give user	 */	public static function  getNumberOfDocuments( Application_Model_User $antaUser ){		$stmt = Anta_Core::mysqli()->query( "SELECT COUNT(*) as amount FROM anta_".$antaUser->username.".`documents`" );		$row = $stmt->fetchObject();				if( $row == null ) return 0;		return $row->amount;	}		public static function getUnignoredNumberOfDocuments( Application_Model_User $antaUser ){		$stmt = Anta_Core::mysqli()->query( "SELECT `number_of_documents` FROM `anta_".$antaUser->username."`.`documents_metrics`" );		$row = $stmt->fetchObject();				if( $row == null ) return 0;		return $row->number_of_documents;	}		public static function getFilteredNumberOfDocuments( Application_Model_User $antaUser, $property, $value  ){		$stmt = Anta_Core::mysqli()->query( "SELECT COUNT(*) as amount FROM anta_".$antaUser->username.".`documents` WHERE `$property` = ?", array( $value ) );		$row = $stmt->fetchObject();		if( $row == null ) return 0;		return $row->amount;	}		/**	 * return a list of Application_Model_Document	 * matching the given word	 * usage: Application_Model_DocumentsMapper::find( $user, array( "unknown", "host" ) )	 *	 */	public static function find( Application_Model_User $antaUser, array $words, $offset="0", $limit="20", $orderBy="id_document", $orderDir="DESC", $useCoOccurrencesTable = true, $useStemming = true, $leakCoOccurrence = false ){		/*		if( $useStemming ){			"SELECT COUNT( DISTINCT stem_A ) as relevance, MIN( distance ) as distance, co_occurrences.id_document, id_sentence, content, stem_A, stem_B, word_A, word_B, distance FROM `co_occurrences` INNER JOIN sentences USING (id_sentence) WHERE stem_A IN ( "unknown", "aircraft", "compani" ) AND stem_B IN ( "unknown", "aircraft", "compani" ) GROUP BY id_sentence ORDER BY relevance DESC, distance ASC		";}		*/			}	public static function dumpDocuments( Application_Model_User $antaUser, $flush = false ){				$stmt = Anta_Core::mysqli()->query( "			SELECT				id_document, title, description,				mimetype, size, language, DATE_FORMAT( date, '%d/%m/%Y' ) as date, local_url, status			FROM anta_".$antaUser->username.".`documents`"		);				if( $flush === true ) return $stmt;				$results = array();				while( $row = $stmt->fetchObject() ){			$results[] = new Application_Model_Document(				$row->id_document, stripslashes( $row->title ), stripslashes( $row->description ),				$row->mimetype, $row->size, $row->language, $row->date, $row->local_url, $row->status, $antaUser			);		}				return $results;	} 	/**	 * return user's documents.	 * @param filters	- contains indexed the properties to filter the selection	 * @param boolean flush		- if true, this funcion will return the statement object	 * @return object - composite object where object->results show the documents. Note that it may return a flow if flush is set to true.	 */	public static function select( Application_Model_User $antaUser, $filters, $loadTags = true, $flush=false ){		$offset 	= $filters->offset;		$limit  	= $filters->limit;		$tags   	= $filters->tags;		$dateStart	= $filters->date_start;// date dd.mm.YYYY + 00:00		$dateEnd	= $filters->date_end; // date  dd.mm.YYYY + 00:00								$orders	= empty($filters->order)?array("id_document ASC"):$filters->order;		$query	= $filters->query;		$where	= array();		$binds	= array();				if( !empty($tags) ){			$where[] = "id_document IN ( SELECT id_document FROM anta_{$antaUser->username}.documents_tags WHERE id_tag IN ( ".implode(  "," ,array_fill( 0, count( $tags ), "?" ) )." ) )";			$binds = $tags;					}				if( !empty( $dateStart  ) ){			if( empty( $dateEnd ) ){				$dateEnd = $dateStart;			}			$where[] = " `date` BETWEEN  STR_TO_DATE( ? ,'%d.%m.%Y %H:%i') AND STR_TO_DATE( ?,'%d.%m.%Y %H:%i') ";			$binds[] = $dateStart . " 00:00";			$binds[] = $dateEnd . " 23:59";		}				if( !empty( $query ) ){			$where[] = " title REGEXP ? ";			$binds[] = $query;		}		print_r($binds);		$query ="			SELECT SQL_CALC_FOUND_ROWS *, id_document as id, title, description, mimetype, size, language, `ignore`,				 DATE_FORMAT( date, '%d/%m/%Y' ) as formatted_date, date, local_url, status			FROM anta_{$antaUser->username}.`documents`			".( !empty( $where )? "WHERE ".implode( "AND", $where ): "")."			ORDER BY ".implode( ", ", $orders )."			".($limit != -1? "LIMIT {$offset}, {$limit}": "");				$stmt = Anta_Core::mysqli()->query( $query, $binds );		$results = array();				while( $row = $stmt->fetchObject() ){						$results[] = new Application_Model_Document(				$row->id, stripslashes( $row->title ), stripslashes( $row->description ),				$row->mimetype, $row->size, $row->language, $row->formatted_date, $row->localUrl, $row->status, $antaUser, $row->ignore			);								}				$stmt = Anta_Core::mysqli()->query(" SELECT  FOUND_ROWS() as totalItems" );		$totalItems = $stmt->fetchObject()->totalItems ;				if( $loadTags  ){ // load tags			foreach( array_keys( $results ) as $k ){				$results[$k]->tags = self::getTags( $antaUser, $results[$k]->id );			}		}										return (object) array( "results"=> $results, "totalItems" => $totalItems) ;			}	/**	 * DEPRECATED	 * return user's documents. 	 * @param filters	- contains indexed the properties to filter the selection	 * @param offset	- offset left	 * @param limit		- results limit	 * @param boolean flush		- if true, this funcion will return the statement object	 * @return object - composite object where object->results show the documents. Note that it may return a flow if flush is set to true.	 */	public static function get( Application_Model_User $antaUser, array $orders = array(), $offset = 0, $limit = 20, $tags = null, $loadTags = true, $flush = false ){				// search and other filters		$where = array();		$binds = array();				if( !empty($tags) ){			$where[] = "id_document IN ( SELECT id_document FROM anta_{$antaUser->username}.documents_tags WHERE id_tag = ? )";			$binds[] = $tags[0];			}								$stmt = Anta_Core::mysqli()->query( "			SELECT ".(  $flush? "": "SQL_CALC_FOUND_ROWS *," )." id_document as id, title, description, mimetype, size, language, `ignore`,				 DATE_FORMAT( date, '%d/%m/%Y' ) as formatted_date, date, local_url, status			FROM anta_{$antaUser->username}.`documents`			".( !empty( $where )? "WHERE ".implode( "AND", $where ): "")."			ORDER BY ".implode( ", ", $orders )."			".($limit != -1? "LIMIT {$offset}, {$limit}": ""), $binds		);				if( $flush ) return $stmt;				$results = array();				while( $row = $stmt->fetchObject() ){						$results[] = new Application_Model_Document(				$row->id, stripslashes( $row->title ), stripslashes( $row->description ),				$row->mimetype, $row->size, $row->language, $row->formatted_date, $row->localUrl, $row->status, $antaUser, $row->ignore			);								}				$stmt = Anta_Core::mysqli()->query(" SELECT  FOUND_ROWS() as totalItems" );		$totalItems = $stmt->fetchObject()->totalItems ;				if( $loadTags  ){ // load tags			foreach( array_keys( $results ) as $k ){				$results[$k]->tags = self::getTags( $antaUser, $results[$k]->id );			}		}										return (object) array( "results"=> $results, "totalItems" => $totalItems) ;			}		/**	 * return some document	 */	public static function getDocuments( Application_Model_User $antaUser, $status="all", $offset="0", $limit="20", $orderBy="id_document", $orderDir="DESC" ){		$binds = array();		$statusQuery = "WHERE status != 'removed'";		$limitQuery  = "";				if( $status != "all" ){			$binds[] = $status;			$statusQuery = "WHERE status = ?";		}				if( $limit != 0 ){			$binds[] = $offset;			$binds[] = $limit;			$limitQuery  = "LIMIT ?, ?";		}				$query = "			SELECT id_document as id, title, description,				mimetype as mimeType, size, language, DATE_FORMAT( date, '%d/%m/%Y' ) as date, local_url as localUrl, status			FROM anta_".$antaUser->username.".`documents`			$statusQuery  ORDER BY $orderBy $orderDir $limitQuery";				$stmt = Anta_Core::mysqli()->query( $query, $binds );				$documents = array();				while( $row = $stmt->fetchObject() ){						$doc = new Application_Model_Document(				$row->id, stripslashes( $row->title ), stripslashes( $row->description ),				$row->mimeType, $row->size, $row->language, $row->date, $row->localUrl, $row->status, $antaUser			);			// load doc authors									$documents[ $row->id ] = $doc;		}				return $documents;	}		/**	 * send document to bin. Once there, documents can be deleted.	 */	public static function getDocument( Application_Model_User $antaUser, $idDocument ){				// change status to removed...						$stmt = Anta_Core::mysqli()->query( "			SELECT id_document as id, title, description,				mimetype as mimeType, size, language, DATE_FORMAT( date,'%d/%m/%Y') as date, local_url as localUrl, status			FROM  anta_".$antaUser->username.".`documents`			WHERE id_document = ? ", array( $idDocument )		);				 $row = $stmt->fetchObject();					if( $row == null ) return null;				return new Application_Model_Document( 			$row->id, $row->title, $row->description,			$row->mimeType, $row->size, $row->language, $row->date, $row->localUrl, $row->status, $antaUser		); 			}		public static function getNextDocument( Application_Model_User $antaUser, $ignoreStatus = false, $after = -1 ){				$stmt = Anta_Core::mysqli()->query( "			SELECT id_document as id, title, description,				mimetype as mimeType, size, language, date, local_url as localUrl, status			FROM anta_".$antaUser->username.".`documents` WHERE `ignore` = 0 ".			( $after == -1?'':"AND id_document > {$after}").			( $ignoreStatus?'':"AND status = 'ready' OR status = 'incomple'")." 			ORDER BY id_document ASC LIMIT 1" );				$row = $stmt->fetchObject();					if( $row == null ) return null;				return new Application_Model_Document( 			$row->id, $row->title, $row->description,			$row->mimeType, $row->size, $row->language, $row->date, $row->localUrl, $row->status, $antaUser		); 			}		public static function comeBackReady( Application_Model_User $antaUser ){		$stmt = Anta_Core::mysqli()->query( "			UPDATE anta_".$antaUser->username.".documents SET				status = ?", array( 'ready' )		);		return $stmt->rowCount();	}		public static function editDocument( Application_Model_User $antaUser, $idDocument, $title, $description, $date, $language ){		$stmt = Anta_Core::mysqli()->query("			UPDATE anta_".$antaUser->username.".documents SET				title = ?,				description = ?,				language = ?,				date = STR_TO_DATE( ?,'%d/%m/%Y')			WHERE id_document = ?", array(			$title,			$description,			$language,			$date,			$idDocument		));		return $stmt->rowCount();	}		public static function setLanguage(  Application_Model_User $antaUser, $idDocument, $language ){		$stmt = Anta_Core::mysqli()->query("			UPDATE anta_".$antaUser->username.".documents SET				language = ?			WHERE id_document = ? ", array(			$language,			$idDocument		));		return $stmt->rowCount();	}		public static function setMimetype(  Application_Model_User $antaUser, $idDocument, $mimetype ){		$stmt = Anta_Core::mysqli()->query("			UPDATE anta_".$antaUser->username.".documents SET				mimetype = ?			WHERE id_document = ? ", array(			$mimetype,			$idDocument		));		return $stmt->rowCount();	}		/**	 * if true, do not visualize documents	 * @ignore 	- 1 or 0, given as string	 */	public static function setIgnore(  Application_Model_User $antaUser, $idDocument, $ignore ){		$stmt = Anta_Core::mysqli()->query("			UPDATE anta_".$antaUser->username.".documents SET				`ignore` = ?			WHERE id_document = ? ", array(			$ignore,			$idDocument		));		return $stmt->rowCount();	}		/**	 * @dateString the date to update		 * @dateFormat according to mysql specs.	 */	public static function setDate(  Application_Model_User $antaUser, $idDocument, $dateString="1999.08.31", $dateFormat="%Y.%m.%d" ){		$stmt = Anta_Core::mysqli()->query("			UPDATE anta_".$antaUser->username.".documents SET				`date` = STR_TO_DATE( ?,'{$dateFormat}' )			WHERE id_document = ? ", array(			$dateString,			$idDocument		));		return $stmt->rowCount();	}		/**	 * @dateString the date to update		 * @dateFormat according to mysql specs.	 */	public static function setTitle(  Application_Model_User $antaUser, $idDocument, $title ){		$stmt = Anta_Core::mysqli()->query("			UPDATE anta_".$antaUser->username.".documents SET				`title` = ?			WHERE id_document = ? ", array(			$title,			$idDocument		));		return $stmt->rowCount();	}		public static function changeDocumentStatus(  Application_Model_User $antaUser, $idDocument, $status ) {		$stmt = Anta_Core::mysqli()->query("UPDATE anta_".$antaUser->username.".documents SET status = ? WHERE id_document = ?", array(			$status,			$idDocument		));		return $stmt->rowCount();	}				/**	 * try to send document to "bin". Once there, documents can be deleted.	 */	public static function removeDocument(  $antaUser, $idDocument ){										try{			$document = self::getDocument(  $antaUser, $idDocument );					// try to unlink			$localUrl = Anta_Core::getUploadPath()."/".$antaUser->username."/".$document->localUrl;							@unlink( $localUrl );			$localTxt = $localUrl.".txt";					if( file_exists( $localTxt ) ){				@unlink( $localTxt );			}					} catch( Exception $e ){			Anta_Core::setError(  $e->getMessage() );		}				$stmt = Anta_Core::mysqli()->query("DELETE FROM anta_".$antaUser->username.".documents WHERE id_document = ?", array(			$idDocument		));						return $stmt->rowCount();	}		/**	 * Bring back documents status to 'ready'	 */	public static function clearDocuments( $antaUser ){		$stmt = Anta_Core::mysqli()->query( "UPDATE anta_".$antaUser->username.".documents SET status = 'ready' ");				return $stmt->rowCount();	}		public static function clearEntities( Application_Model_User $antaUser, $idDocument ){		$stmt = Anta_Core::mysqli()->query( "			DELETE FROM anta_".$antaUser->username.".`documents_entities` WHERE id_document = ?		", array( $idDocument ) );				return $stmt->rowCount();	}		/**	 * return a list of tag categories for document tags	 */	public static function getCategories( Application_Model_User $antaUser, $idDocument  ){				$stmt = Anta_Core::mysqli()->query( "			SELECT				id_category, content, type			FROM anta_".$antaUser->username.".`categories`			WHERE id_category IN ( 				SELECT DISTINCT id_category FROM anta_".$antaUser->username.".`documents_tags` NATURAL JOIN anta_".$antaUser->username.".`tags` WHERE id_document = ? 			)", array(				$idDocument 		));				$results = array();		while( $row = $stmt->fetchObject() ){			$results[] = new Application_Model_Category( $row->id_category, $row->content, $row->type );		}		return $results;	}		public static function getTags( Application_Model_User $antaUser, $idDocument ){		$stmt = Anta_Core::mysqli()->query( "			SELECT ta.id_tag, ta.content, ( SELECT cat.content FROM anta_".$antaUser->username.".categories cat WHERE cat.id_category = ta.id_category ) as category, ta.parent_id_tag FROM anta_".$antaUser->username.".`documents_tags` dt NATURAL JOIN anta_".$antaUser->username.".`tags` ta			WHERE dt.id_document = ? ORDER BY content", array(				$idDocument		));		$results = array();		while( $row = $stmt->fetchObject() ){			$results[] = new Application_Model_Tag( $row->id_tag, $row->content, $row->category, $row->parent_id_tag );		}		return $results;			}}?>